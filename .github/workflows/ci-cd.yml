name: Arial CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    release:
        types: [published]

env:
    PYTHON_VERSION: "3.11"

jobs:
    lint:
        name: Code Linting
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8 black isort bandit safety

            - name: Run Black (Code Formatting)
              run: black --check --diff .

            - name: Run isort (Import Sorting)
              run: isort --check-only --diff .

            - name: Run Flake8 (Linting)
              run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

            - name: Run Bandit (Security)
              run: bandit -r . -f json -o bandit-report.json || true

            - name: Upload Bandit Report
              uses: actions/upload-artifact@v3
              with:
                  name: bandit-report
                  path: bandit-report.json

    test:
        name: Unit Tests
        runs-on: ubuntu-latest
        needs: lint

        strategy:
            matrix:
                python-version: ["3.8", "3.9", "3.10", "3.11"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y aria2 ffmpeg

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov pytest-mock

            - name: Run Tests
              run: |
                  pytest tests/ --cov=. --cov-report=xml --cov-report=html

            - name: Upload Coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    docker:
        name: Docker Build Test
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker Image
              run: |
                  docker build -t arial:test .

            - name: Test Docker Container
              run: |
                  docker run -d --name arial-test -p 5000:5000 arial:test
                  sleep 10
                  curl -f http://localhost:5000/api/config || exit 1
                  docker stop arial-test

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: lint

        steps:
            - uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: "trivy-results.sarif"

    dependency-check:
        name: Dependency Check
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install safety pip-audit

            - name: Check for known security vulnerabilities
              run: |
                  safety check --json --output safety-report.json || true
                  pip-audit --format=json --output=pip-audit-report.json || true

            - name: Upload Security Reports
              uses: actions/upload-artifact@v3
              with:
                  name: security-reports
                  path: |
                      safety-report.json
                      pip-audit-report.json

    deploy:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [test, docker, security]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      amania/arial:latest
                      amania/arial:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [test, docker, security]
        if: github.event_name == 'release'

        steps:
            - uses: actions/checkout@v4

            - name: Get Release Version
              id: get_version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Update CHANGELOG
              run: |
                  echo "## [${{ steps.get_version.outputs.VERSION }}] - $(date +%Y-%m-%d)" >> temp_changelog
                  echo "" >> temp_changelog
                  echo "### Added" >> temp_changelog
                  echo "- Release ${{ steps.get_version.outputs.VERSION }}" >> temp_changelog
                  echo "" >> temp_changelog
                  cat CHANGELOG.md >> temp_changelog
                  mv temp_changelog CHANGELOG.md

            - name: Create Release Assets
              run: |
                  zip -r arial-${{ steps.get_version.outputs.VERSION }}.zip . -x "*.git*" "*.venv*" "*__pycache__*" "downloads/*"

            - name: Upload Release Assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: ./arial-${{ steps.get_version.outputs.VERSION }}.zip
                  asset_name: arial-${{ steps.get_version.outputs.VERSION }}.zip
                  asset_content_type: application/zip
